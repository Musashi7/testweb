(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{1441:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=a.a.createContext({}),p=function(e){var t=a.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(o.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,o=b(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,d=u["".concat(i,".").concat(m)]||u[m]||s[m]||l;return n?a.a.createElement(d,c(c({ref:t},o),{},{components:n})):a.a.createElement(d,c({ref:t},o))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var c={};for(var b in t)hasOwnProperty.call(t,b)&&(c[b]=t[b]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var o=2;o<l;o++)i[o]=n[o];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},149:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),l=(n(0),n(1441)),i={id:"Geometry.Edge.OffsetLine",title:"Geometry.Edge.OffsetLine()",author:"TechnoStar Co., Ltd.",authorURL:"https://www.e-technostar.com/",description:"Create new Edges by offsetting existing Edges."},c={unversionedId:"psj-command/geometry/Geometry.Edge.OffsetLine",id:"psj-command/geometry/Geometry.Edge.OffsetLine",isDocsHomePage:!1,title:"Geometry.Edge.OffsetLine()",description:"Create new Edges by offsetting existing Edges.",source:"@site/docs\\psj-command\\geometry\\Geometry.Edge.OffsetLine.md",slug:"/psj-command/geometry/Geometry.Edge.OffsetLine",permalink:"/testweb/docs/psj-command/geometry/Geometry.Edge.OffsetLine",version:"current",sidebar:"api",previous:{title:"Geometry.Edge.NodeShortestPath()",permalink:"/testweb/docs/psj-command/geometry/Geometry.Edge.NodeShortestPath"},next:{title:"Geometry.Edge.PerpendicularCylinderLine()",permalink:"/testweb/docs/psj-command/geometry/Geometry.Edge.PerpendicularCylinderLine"}},b=[{value:"Description",id:"description",children:[]},{value:"Syntax",id:"syntax",children:[]},{value:"Inputs",id:"inputs",children:[]},{value:"Return Code",id:"return-code",children:[]},{value:"Sample Code",id:"sample-code",children:[]}],o={toc:b};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"description"},"Description"),Object(l.b)("p",null,"This method creates new edges by offsetting existing edges."),Object(l.b)("h2",{id:"syntax"},"Syntax"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"Geometry.Edge.OffsetLine(crlFace=[], crlEdge=[], bBreakFace=True, dOffsetDistance=0.0, iNumberLayer=1,\n    bMerge=True, bExtend=True, iLayerMethod=0, dlVlayerOffset=[], bAutoCollapse=False, iRLType=2)\n")),Object(l.b)("p",null,"Macro: {ref}",Object(l.b)("inlineCode",{parentName:"p"},"Macro-Geometry-ImprintOffsetLineS")),Object(l.b)("p",null,"Ribbon: {menuselection}",Object(l.b)("inlineCode",{parentName:"p"},"Geometry --\x3e Edge --\x3e Offset Line")),Object(l.b)("h2",{id:"inputs"},"Inputs"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"crlFace")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"List of Cursor")," specifying the faces that are associated with the edge."),Object(l.b)("li",{parentName:"ul"},"The default value is [].")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"crlEdge")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"List of Cursor")," specifying the edges will be offset."),Object(l.b)("li",{parentName:"ul"},"The default value is [].")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"bBreakFace")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"Boolean")," specifying whether to break the given faces where possible."),Object(l.b)("li",{parentName:"ul"},"The default value is ",Object(l.b)("em",{parentName:"li"},"True"),".")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"dOffsetDistance")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"Double")," specifying the offset distance."),Object(l.b)("li",{parentName:"ul"},"The default value is 0.0.")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"iNumberLayer")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"An ",Object(l.b)("em",{parentName:"li"},"Integer")," specifying the number layer."),Object(l.b)("li",{parentName:"ul"},"The default value is 1.")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"bMerge")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"Boolean")," specifying the merge."),Object(l.b)("li",{parentName:"ul"},"The default value is ",Object(l.b)("em",{parentName:"li"},"True"),".")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"bExtend")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"Boolean")," specifying the extend."),Object(l.b)("li",{parentName:"ul"},"The default value is ",Object(l.b)("em",{parentName:"li"},"True"),".")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"iLayerMethod")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"An ",Object(l.b)("em",{parentName:"li"},"Integer")," specifying the layer method."),Object(l.b)("li",{parentName:"ul"},"The default value is 0.")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"dlVlayerOffset")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"Double List")," specifying the vlayer offset."),Object(l.b)("li",{parentName:"ul"},"The default value is [].")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"bAutoCollapse")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"Boolean")," specifying the auto collapse."),Object(l.b)("li",{parentName:"ul"},"The default value is ",Object(l.b)("em",{parentName:"li"},"False"),".")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"iRLType")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"An ",Object(l.b)("em",{parentName:"li"},"Integer")," specifying the r l type."),Object(l.b)("li",{parentName:"ul"},"The default value is 2.")),Object(l.b)("h2",{id:"return-code"},"Return Code"),Object(l.b)("p",null,"A ",Object(l.b)("em",{parentName:"p"},"String")," of 1 if success, or 0 if fail."),Object(l.b)("h2",{id:"sample-code"},"Sample Code"),Object(l.b)("pre",null,Object(l.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"Geometry.Part.Cylinder(iPartCol=7929341)\n\nGeometry.Edge.OffsetLine(crlFace=[Face(3)], crlEdge=[Edge(1)], dOffsetDistance=0.001, iNumberLayer=2,\n    iRLType=0)\n\n")))}p.isMDXComponent=!0}}]);
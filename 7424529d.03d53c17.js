(window.webpackJsonp=window.webpackJsonp||[]).push([[591],{1441:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var b=a.a.createContext({}),p=function(e){var t=a.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},s=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),u=p(n),s=r,d=u["".concat(o,".").concat(s)]||u[s]||m[s]||c;return n?a.a.createElement(d,i(i({ref:t},b),{},{components:n})):a.a.createElement(d,i({ref:t},b))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=s;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var b=2;b<c;b++)o[b]=n[b];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},670:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),c=(n(0),n(1441)),o={id:"Geometry.Edge.ProjectLine",title:"Geometry.Edge.ProjectLine()",author:"TechnoStar Co., Ltd.",authorURL:"https://www.e-technostar.com/",description:"Project lines on surface"},i={unversionedId:"psj-command/geometry/Geometry.Edge.ProjectLine",id:"psj-command/geometry/Geometry.Edge.ProjectLine",isDocsHomePage:!1,title:"Geometry.Edge.ProjectLine()",description:"Project lines on surface",source:"@site/docs\\psj-command\\geometry\\Geometry.Edge.ProjectLine.md",slug:"/psj-command/geometry/Geometry.Edge.ProjectLine",permalink:"/testweb/docs/psj-command/geometry/Geometry.Edge.ProjectLine",version:"current",sidebar:"api",previous:{title:"Geometry.Edge.PlanarLine()",permalink:"/testweb/docs/psj-command/geometry/Geometry.Edge.PlanarLine"},next:{title:"Geometry.Edge.Spline()",permalink:"/testweb/docs/psj-command/geometry/Geometry.Edge.Spline"}},l=[{value:"Description",id:"description",children:[]},{value:"Syntax",id:"syntax",children:[]},{value:"Inputs",id:"inputs",children:[]},{value:"Return Code",id:"return-code",children:[]},{value:"Sample Code",id:"sample-code",children:[]}],b={toc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"description"},"Description"),Object(c.b)("p",null,"This method creates new edges by projecting existing edges from the part onto the faces."),Object(c.b)("h2",{id:"syntax"},"Syntax"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"Geometry.Edge.ProjectLine(crlEdge=[], crlFaces=[], crlNode=[], bBreakFace=True, iType=0, bCheckGap=False,\n    dGap=0.0)\n")),Object(c.b)("p",null,"Macro: {ref}",Object(c.b)("inlineCode",{parentName:"p"},"Macro-Geometry-Imprint_Projection_LineS")),Object(c.b)("p",null,"Ribbon: {menuselection}",Object(c.b)("inlineCode",{parentName:"p"},"Geometry --\x3e Edge --\x3e Project Line")),Object(c.b)("h2",{id:"inputs"},"Inputs"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"crlEdge")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"List of Cursor")," specifying the edges to projected."),Object(c.b)("li",{parentName:"ul"},"This is a required input.")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"crlFaces")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"List of Cursor")," specifying the target faces to projects the edges onto."),Object(c.b)("li",{parentName:"ul"},"This is a required input.")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"crlNode")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"List of Cursor")," specifying two nodes to define the projection direction. This argument must be specified if ",Object(c.b)("em",{parentName:"li"},"iType=1"),"."),Object(c.b)("li",{parentName:"ul"},"The default value is [].")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bBreakFace")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Boolean")," whether to break the target faces after the project operation."),Object(c.b)("li",{parentName:"ul"},"The default value is ",Object(c.b)("em",{parentName:"li"},"True"),".")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"iType")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"An ",Object(c.b)("em",{parentName:"li"},"Integer")," specifying the method to be used to project onto target faces. This value must lie between (0,2)."),Object(c.b)("li",{parentName:"ul"},"If ",Object(c.b)("em",{parentName:"li"},"iType=0"),", project along to the face normal direction for the target faces."),Object(c.b)("li",{parentName:"ul"},"If ",Object(c.b)("em",{parentName:"li"},"iType=1"),", project along to the direction defined by two nodes specified by the ",Object(c.b)("em",{parentName:"li"},"crlNode")," member."),Object(c.b)("li",{parentName:"ul"},"If ",Object(c.b)("em",{parentName:"li"},"iType=2"),", project onto the face closest to the selected edge."),Object(c.b)("li",{parentName:"ul"},"The default value is 0.")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bCheckGap")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Boolean")," whether to limit the projection distance to the input value."),Object(c.b)("li",{parentName:"ul"},"The default value is ",Object(c.b)("em",{parentName:"li"},"False"),".")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"dGap")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Double")," specifying the gap value. This argument is to be used when ",Object(c.b)("em",{parentName:"li"},"bCheckGap=True"),"."),Object(c.b)("li",{parentName:"ul"},"The default value is 0.0.")),Object(c.b)("h2",{id:"return-code"},"Return Code"),Object(c.b)("p",null,"A ",Object(c.b)("em",{parentName:"p"},"String")," of 1 if success, or 0 if fail."),Object(c.b)("h2",{id:"sample-code"},"Sample Code"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"Geometry.Part.Cube()\n\nGeometry.Edge.Line(veclPosition=[[0.0056, 0.002, 0.01], [0.003, 0.0078, 0.01]],\n    crlTargetFace=[Face(26)], bBreakFace=False)\n\nGeometry.Edge.ProjectLine(crlEdge=[Edge(27)], crlFaces=[Face(25)])\n\n")))}p.isMDXComponent=!0}}]);
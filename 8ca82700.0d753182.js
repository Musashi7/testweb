(window.webpackJsonp=window.webpackJsonp||[]).push([[691],{1441:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return m}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(r),b=n,m=u["".concat(c,".").concat(b)]||u[b]||d[b]||i;return r?a.a.createElement(m,o(o({ref:t},s),{},{components:r})):a.a.createElement(m,o({ref:t},s))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,c=new Array(i);c[0]=b;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:n,c[1]=o;for(var s=2;s<i;s++)c[s]=r[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"},770:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return o})),r.d(t,"toc",(function(){return l})),r.d(t,"default",(function(){return p}));var n=r(3),a=r(7),i=(r(0),r(1441)),c={id:"Geometry.FCircVertexAdjust",title:"Geometry.FCircVertexAdjust()",author:"TechnoStar Co., Ltd.",authorURL:"https://www.e-technostar.com/",description:"Align vertex positions on circles"},o={unversionedId:"psj-command/geometry/Geometry.FCircVertexAdjust",id:"psj-command/geometry/Geometry.FCircVertexAdjust",isDocsHomePage:!1,title:"Geometry.FCircVertexAdjust()",description:"Align vertex positions on circles",source:"@site/docs\\psj-command\\geometry\\Geometry.FCircVertexAdjust.md",slug:"/psj-command/geometry/Geometry.FCircVertexAdjust",permalink:"/testweb/docs/psj-command/geometry/Geometry.FCircVertexAdjust",version:"current",sidebar:"api",previous:{title:"Geometry.ExtractSurfaces()",permalink:"/testweb/docs/psj-command/geometry/Geometry.ExtractSurfaces"},next:{title:"Geometry.Face.CreateSmoothFace()",permalink:"/testweb/docs/psj-command/geometry/Geometry.Face.CreateSmoothFace"}},l=[{value:"Description",id:"description",children:[]},{value:"Syntax",id:"syntax",children:[]},{value:"Inputs",id:"inputs",children:[]},{value:"Return Code",id:"return-code",children:[]},{value:"Sample Code",id:"sample-code",children:[]}],s={toc:l};function p(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"description"},"Description"),Object(i.b)("p",null,"This method aligns the vertex positions on the circles. Cylinder faces can also be split by 90 degree, for creating mapped mesh."),Object(i.b)("h2",{id:"syntax"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"Geometry.FCircVertexAdjust(crlPart, bFullCylinder=False, bCylinderMoreThan90=False, dMinRadius=0.0)\n")),Object(i.b)("p",null,"Macro: {ref}",Object(i.b)("inlineCode",{parentName:"p"},"Macro-Geometry-MeshEditGeomEditDivideCylinderBy90Deg")),Object(i.b)("p",null,"Ribbon: {menuselection}",Object(i.b)("inlineCode",{parentName:"p"},"Geometry --\x3e FCirc Vertex Adjust")),Object(i.b)("h2",{id:"inputs"},"Inputs"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"crlPart")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"Cursor List")," specifying the parts whose vertex will be adjusted."),Object(i.b)("li",{parentName:"ul"},"This is a required input.")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"bFullCylinder")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"Boolean")," specifying whether to divide the full cylinder faces by 90 degree or not."),Object(i.b)("li",{parentName:"ul"},"If ",Object(i.b)("em",{parentName:"li"},"True"),", the cylindrical surfaces and torus surfaces in the selected parts will be divided into four locations at each 90 degree. This splitting makes it easier to create a mapped mesh."),Object(i.b)("li",{parentName:"ul"},"The default value is ",Object(i.b)("em",{parentName:"li"},"False"),".")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"bCylinderMoreThan90")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"Boolean")," specifying whether to divide the cylinder faces more than 90 degree interior angle or not."),Object(i.b)("li",{parentName:"ul"},"If ",Object(i.b)("em",{parentName:"li"},"True"),", the cylinder surfaces in the selected part with an internal angle of 90 degree or more will be divided at the 90 degree position."),Object(i.b)("li",{parentName:"ul"},"The default value is ",Object(i.b)("em",{parentName:"li"},"False"),".")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"dMinRadius")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"Double")," specifying the minimum radius of the cylinder faces to be split. Faces with radius less than the input value are kept."),Object(i.b)("li",{parentName:"ul"},"The default value is 0.0.")),Object(i.b)("h2",{id:"return-code"},"Return Code"),Object(i.b)("p",null,"A ",Object(i.b)("em",{parentName:"p"},"String")," of 1 if success, or 0 if fail."),Object(i.b)("h2",{id:"sample-code"},"Sample Code"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"# Make a cylinder with 2 misaligned vertex\nGeometry.Part.Cylinder()\nGeometry.BreakEntity.Edge(crlNode=[Node(66)])\nGeometry.BreakEntity.Edge(crlNode=[Node(51)])\n\n# Align vertex positions on 2 circles of the cylinder\nGeometry.FCircVertexAdjust(crlPart=[Part(1)])\n\n")))}p.isMDXComponent=!0}}]);
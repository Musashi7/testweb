(window.webpackJsonp=window.webpackJsonp||[]).push([[296],{1441:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),u=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=u(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),b=u(n),d=r,m=b["".concat(c,".").concat(d)]||b[d]||s[d]||o;return n?a.a.createElement(m,l(l({ref:t},p),{},{components:n})):a.a.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var p=2;p<o;p++)c[p]=n[p];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},372:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),o=(n(0),n(1441)),c={id:"MakeFacePlanar",title:"MakeFacePlanar",author:"TechnoStar Co., Ltd.",authorURL:"https://www.e-technostar.com/"},l={unversionedId:"macro/geometry/MakeFacePlanar",id:"macro/geometry/MakeFacePlanar",isDocsHomePage:!1,title:"MakeFacePlanar",description:"Description",source:"@site/docs\\macro\\geometry\\Macro-Geometry-MakeFacePlanar.md",slug:"/macro/geometry/MakeFacePlanar",permalink:"/testweb/docs/macro/geometry/MakeFacePlanar",version:"current",sidebar:"api",previous:{title:"ImprintCloseLineS",permalink:"/testweb/docs/macro/geometry/ImprintCloseLineS"},next:{title:"Imprint_PlanarLine",permalink:"/testweb/docs/macro/geometry/Imprint_PlanarLine"}},i=[{value:"Description",id:"description",children:[]},{value:"Syntax",id:"syntax",children:[]},{value:"Inputs",id:"inputs",children:[]},{value:"Return Code",id:"return-code",children:[]},{value:"Sample Code",id:"sample-code",children:[]}],p={toc:i};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"description"},"Description"),Object(o.b)("p",null,"Make planar faces by given plane points"),Object(o.b)("h2",{id:"syntax"},"Syntax"),Object(o.b)("p",null,"MakeFacePlanar(double","[3]"," dPlanePt1, double","[3]"," dPlanePt2, double","[3]"," dPlanePt3, int[] nFaceIDs, bool mergeFace)"),Object(o.b)("h2",{id:"inputs"},"Inputs"),Object(o.b)("p",null,"1",".","  Double","[3]","\nPlane point 1"),Object(o.b)("p",null,"2",".","  Double","[3]","\nPlane point 2"),Object(o.b)("p",null,"3",".","  Double","[3]","\nPlane point 3"),Object(o.b)("p",null,"4",".","  Int[]\nTarget faces for making planar surface(","[Face ID]",")"),Object(o.b)("p",null,"5",".","  Bool\nWhether merge face or not True = 1, False = 0"),Object(o.b)("h2",{id:"return-code"},"Return Code"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"1")," - The function is executed correctly."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"0")," - Cannot execute."),Object(o.b)("h2",{id:"sample-code"},"Sample Code"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"MakeFacePlanar([0.01, 0.01, 0.007272871569190634], [0.01, 0.01, 0], [0.003333333333333333, 0.01, 0], [47], 0)\n")))}u.isMDXComponent=!0}}]);
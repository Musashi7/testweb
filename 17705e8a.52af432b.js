(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{1441:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,m=u["".concat(o,".").concat(d)]||u[d]||b[d]||a;return n?i.a.createElement(m,s(s({ref:t},c),{},{components:n})):i.a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},185:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),i=n(7),a=(n(0),n(1441)),o={id:"Analysis.ExportAdx",title:"Analysis.ExportAdx()",author:"TechnoStar Co., Ltd.",authorURL:"https://www.e-technostar.com/",description:"Export ADVC solver file"},s={unversionedId:"psj-command/analysis/Analysis.ExportAdx",id:"psj-command/analysis/Analysis.ExportAdx",isDocsHomePage:!1,title:"Analysis.ExportAdx()",description:"Export ADVC solver file",source:"@site/docs\\psj-command\\analysis\\Analysis.ExportAdx.md",slug:"/psj-command/analysis/Analysis.ExportAdx",permalink:"/testweb/docs/psj-command/analysis/Analysis.ExportAdx",version:"current",sidebar:"api",previous:{title:"Analysis.ExportAbaqus()",permalink:"/testweb/docs/psj-command/analysis/Analysis.ExportAbaqus"},next:{title:"Analysis.ExportAnsys()",permalink:"/testweb/docs/psj-command/analysis/Analysis.ExportAnsys"}},l=[{value:"Description",id:"description",children:[]},{value:"Syntax",id:"syntax",children:[]},{value:"Inputs",id:"inputs",children:[]},{value:"Return Code",id:"return-code",children:[]},{value:"Sample Code",id:"sample-code",children:[]}],c={toc:l};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"description"},"Description"),Object(a.b)("p",null,"This method exports the ADVENTURECluster solver file in adx format with the existing Job in Assembly Tree. By pointing out the desired ADVC Job in Assembly Tree, exporting could be done multiple times with user's setting."),Object(a.b)("h2",{id:"syntax"},"Syntax"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'Analysis.ExportAdx(crJob=None, strPath="", iNumType=0, iUiWidth=10, iUiPrecision=1)\n')),Object(a.b)("p",null,"Macro: {ref}",Object(a.b)("inlineCode",{parentName:"p"},"Macro-Analysis-ExportAdx")),Object(a.b)("p",null,"Ribbon: {menuselection}",Object(a.b)("inlineCode",{parentName:"p"},"Analysis --\x3e Export Adx")),Object(a.b)("h2",{id:"inputs"},"Inputs"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"crJob")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"A ",Object(a.b)("em",{parentName:"li"},"Cursor")," specifying the ADVC analysis Job in Assembly Tree by using identification number (ID number) of the Job."),Object(a.b)("li",{parentName:"ul"},"This is a required input.")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"strPath")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"A ",Object(a.b)("em",{parentName:"li"},"String")," specifying the destination path file to export. The destination path should be different from C Drive (C:/) due to Window would deny saving any files to C Drive directly (It is recommended to save in User's Drive such as D Drive, E Drive,...)"),Object(a.b)("li",{parentName:"ul"},"This is a required input.")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"iNumType")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"An ",Object(a.b)("em",{parentName:"li"},"Integer")," specifying the numeric format type. This argument would allow numeric setting type of adx file."),Object(a.b)("li",{parentName:"ul"},"If ",Object(a.b)("em",{parentName:"li"},"iNumType=0"),": Real Type - The numerical values in real number format"),Object(a.b)("li",{parentName:"ul"},"If ",Object(a.b)("em",{parentName:"li"},"iNumType=1"),": Power Type - The numerical values in exponential format (or scientific format)"),Object(a.b)("li",{parentName:"ul"},"If ",Object(a.b)("em",{parentName:"li"},"iNumType=2"),": Auto Type - The numerical values would show in both above types depending on value of model"),Object(a.b)("li",{parentName:"ul"},"The default value is 0.")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"iUiWidth")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"An ",Object(a.b)("em",{parentName:"li"},"Integer")," specifying the number of digits when iNumType = Power Type."),Object(a.b)("li",{parentName:"ul"},"The default value is 10.")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"iUiPrecision")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"An ",Object(a.b)("em",{parentName:"li"},"Integer")," specifying the the number of decimals when iNumType = Power Type."),Object(a.b)("li",{parentName:"ul"},"The default value is 1.")),Object(a.b)("h2",{id:"return-code"},"Return Code"),Object(a.b)("p",null,"An ",Object(a.b)("em",{parentName:"p"},"String")," of 1 if success, or 0 if failed."),Object(a.b)("h2",{id:"sample-code"},"Sample Code"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'Geometry.Part.Cube(iColorPart=12999622)\n\nAnalysis.ADVC.MakeProcess.Static(strName="ADVC_DEFAULT_PROCESS", advcStructTimeStep=ADVC_STRUCT_TIME_STEP(dMaxDt=1.0, dMinDt=1e-05), dStabilizationFactor=DFLT_DBL, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], listAdvcRefStressResult=[])\n\nAnalysis.ADVC.MakeProcess.Static(strName="ADVC_DEFAULT_PROCESS", advcStructTimeStep=ADVC_STRUCT_TIME_STEP(dMaxDt=1.0, dMinDt=1e-05), dStabilizationFactor=DFLT_DBL, crEdit=ADVCProcessStatic(1), listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], listAdvcRefStressResult=[])\n\nAnalysis.ADVC.MakeProcess.Static(strName="ADVC_DEFAULT_PROCESS", advcStructTimeStep=ADVC_STRUCT_TIME_STEP(dMaxDt=1.0, dMinDt=1e-05), dStabilizationFactor=DFLT_DBL, crEdit=ADVCProcessStatic(1), listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], listAdvcRefStressResult=[])\n\nAnalysis.ADVC.Structure(strName="Job_1", crlProcessSequence=[ADVCProcessStatic(1)], crlTarget=[Part(1)], bAutoAssignDummyProp=True, listLoadNodeContact=[], strPath="D:/Job_1.adx", iNumType=2, iUiPrecision=5)\n\nAnalysis.ExportAdx(crJob=ADVCJob(1), strPath="D:/Job_2.adx", iNumType=2, iUiPrecision=5)\n\n')))}p.isMDXComponent=!0}}]);
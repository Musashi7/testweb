(window.webpackJsonp=window.webpackJsonp||[]).push([[297],{1441:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var r=n(0),i=n.n(r);function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},d=Object.keys(e);for(r=0;r<d.length;r++)n=d[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(r=0;r<d.length;r++)n=d[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),p=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,d=e.originalType,a=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),s=p(n),b=r,m=s["".concat(a,".").concat(b)]||s[b]||u[b]||d;return n?i.a.createElement(m,o(o({ref:t},l),{},{components:n})):i.a.createElement(m,o({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var d=n.length,a=new Array(d);a[0]=b;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var l=2;l<d;l++)a[l]=n[l];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},373:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(3),i=n(7),d=(n(0),n(1441)),a={id:"MidPlaneEdit.Edge.Nodes",title:"MidPlaneEdit.Edge.Nodes()",author:"TechnoStar Co., Ltd.",authorURL:"https://www.e-technostar.com/",description:"Edit mid-plane with edge nodes"},o={unversionedId:"psj-command/midplane-edit/MidPlaneEdit.Edge.Nodes",id:"psj-command/midplane-edit/MidPlaneEdit.Edge.Nodes",isDocsHomePage:!1,title:"MidPlaneEdit.Edge.Nodes()",description:"Edit mid-plane with edge nodes",source:"@site/docs\\psj-command\\midplane-edit\\MidPlaneEdit.Edge.Nodes.md",slug:"/psj-command/midplane-edit/MidPlaneEdit.Edge.Nodes",permalink:"/testweb/docs/psj-command/midplane-edit/MidPlaneEdit.Edge.Nodes",version:"current",sidebar:"api",previous:{title:"MidPlaneEdit.AddItems.Face.EFProject()",permalink:"/testweb/docs/psj-command/midplane-edit/MidPlaneEdit.AddItems.Face.EFProject"},next:{title:"MidPlaneEdit.ExtendFace.CylinderFace()",permalink:"/testweb/docs/psj-command/midplane-edit/MidPlaneEdit.ExtendFace.CylinderFace"}},c=[{value:"Description",id:"description",children:[]},{value:"Syntax",id:"syntax",children:[]},{value:"Inputs",id:"inputs",children:[]},{value:"Return Code",id:"return-code",children:[]},{value:"Sample Code",id:"sample-code",children:[]}],l={toc:c};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(d.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(d.b)("h2",{id:"description"},"Description"),Object(d.b)("p",null,"Edit mid-plane with edge nodes"),Object(d.b)("h2",{id:"syntax"},"Syntax"),Object(d.b)("pre",null,Object(d.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"MidPlaneEdit.Edge.Nodes(crlNode=[])\n")),Object(d.b)("p",null,"Macro: {ref}",Object(d.b)("inlineCode",{parentName:"p"},"Macro-MidPlaneEdit-MidplaneEditAddEdgeNodes")),Object(d.b)("p",null,"Ribbon: {menuselection}",Object(d.b)("inlineCode",{parentName:"p"},"MidPlaneEdit --\x3e Edge --\x3e Nodes")),Object(d.b)("h2",{id:"inputs"},"Inputs"),Object(d.b)("p",null,Object(d.b)("strong",{parentName:"p"},Object(d.b)("inlineCode",{parentName:"strong"},"crlNode"))),Object(d.b)("ul",null,Object(d.b)("li",{parentName:"ul"},"A ",Object(d.b)("em",{parentName:"li"},"Cursor List")," specifying the node. The default value is [].")),Object(d.b)("h2",{id:"return-code"},"Return Code"),Object(d.b)("p",null,"An ",Object(d.b)("em",{parentName:"p"},"String")," of 1 if successed, or 0 if failed."),Object(d.b)("h2",{id:"sample-code"},"Sample Code"),Object(d.b)("pre",null,Object(d.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"MidPlaneEdit.Edge.Nodes(crlNode=[])\n")))}p.isMDXComponent=!0}}]);
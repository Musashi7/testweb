(window.webpackJsonp=window.webpackJsonp||[]).push([[1060],{1139:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),i=(n(0),n(1441)),l={id:"Analysis.ADVC.MakeProcess.EigenValue",title:"Analysis.ADVC.MakeProcess.EigenValue()",author:"TechnoStar Co., Ltd.",authorURL:"https://www.e-technostar.com/",description:"Create ADVC Analysis - Eigen Value Process"},s={unversionedId:"psj-command/analysis/Analysis.ADVC.MakeProcess.EigenValue",id:"psj-command/analysis/Analysis.ADVC.MakeProcess.EigenValue",isDocsHomePage:!1,title:"Analysis.ADVC.MakeProcess.EigenValue()",description:"Create ADVC Analysis - Eigen Value Process",source:"@site/docs\\psj-command\\analysis\\Analysis.ADVC.MakeProcess.EigenValue.md",slug:"/psj-command/analysis/Analysis.ADVC.MakeProcess.EigenValue",permalink:"/testweb/docs/psj-command/analysis/Analysis.ADVC.MakeProcess.EigenValue",version:"current",sidebar:"api",previous:{title:"Analysis.ADVC.MakeProcess.DynamicExplicit()",permalink:"/testweb/docs/psj-command/analysis/Analysis.ADVC.MakeProcess.DynamicExplicit"},next:{title:"Analysis.ADVC.MakeProcess.Fatigue()",permalink:"/testweb/docs/psj-command/analysis/Analysis.ADVC.MakeProcess.Fatigue"}},c=[{value:"Description",id:"description",children:[]},{value:"Syntax",id:"syntax",children:[]},{value:"Inputs",id:"inputs",children:[]},{value:"Return Code",id:"return-code",children:[]},{value:"Sample Code",id:"sample-code",children:[]}],o={toc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"description"},"Description"),Object(i.b)("p",null,"Create advc eigen value process"),Object(i.b)("h2",{id:"syntax"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'Analysis.ADVC.MakeProcess.EigenValue(strName, bEigenValue=False, advcNormalModal= ADVC_NORMAL_MODAL(), crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])\n')),Object(i.b)("p",null,"Macro: {ref}",Object(i.b)("inlineCode",{parentName:"p"},"Macro-Analysis-AdvcEigenProcess")),Object(i.b)("p",null,"Ribbon: {menuselection}",Object(i.b)("inlineCode",{parentName:"p"},"Analysis --\x3e ADVC --\x3e MakeProcess --\x3e EigenValue")),Object(i.b)("h2",{id:"inputs"},"Inputs"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"strName"))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"String")," specifying the process name of ADVC analysis. This is a required input.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"bEigenValue"))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"Boolean")," enable/disable the eigen value parameter defined. The default value is False.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"advcNormalModal"))),Object(i.b)("p",null,": A ",Object(i.b)("em",{parentName:"p"},Object(i.b)("a",Object(a.a)({parentName:"em"},{href:"ADVC_NORMAL_MODAL"}),"ADVC_NORMAL_MODAL"))," specifying the parameters for the eigenvalue analysis. The default value is {ref}",Object(i.b)("inlineCode",{parentName:"p"},"ADVC_NORMAL_MODAL()"),".",Object(i.b)("em",{parentName:"p"},Object(i.b)("a",Object(a.a)({parentName:"em"},{href:"ADVC_NORMAL_MODAL()%60."}),"ADVC_NORMAL_MODAL()`."),": A "),Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"ADVC_NORMAL_MODAL"}),"ADVC_NORMAL_MODAL"),"_ specifying the parameters for the eigenvalue analysis. The default value is {ref}",Object(i.b)("inlineCode",{parentName:"p"},"ADVC_NORMAL_MODAL()"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"crEdit"))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"Cursor")," specifying the editing ADVC Analysis Normal Modal process. The default value is None.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"listLoadNode"))),Object(i.b)("p",null,": A ",Object(i.b)("em",{parentName:"p"},"[LOAD_NODE` List")," specifying the list of Load node. The default value is [].](LOAD",Object(i.b)("em",{parentName:"p"},"NODE` List")," specifying the list of Load node. The default value is [].): A ",Object(i.b)("em",{parentName:"p"},"{ref}",Object(i.b)("inlineCode",{parentName:"em"},"LOAD_NODE")," List")," specifying the list of Load node. The default value is []."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"listLoadCaseNode"))),Object(i.b)("p",null,": A ",Object(i.b)("em",{parentName:"p"},"[LOAD_CASE_NODE` List")," specifying the list of load case node. The default value is [].](LOAD",Object(i.b)("em",{parentName:"p"},"CASE_NODE` List")," specifying the list of load case node. The default value is [].): A ",Object(i.b)("em",{parentName:"p"},"{ref}",Object(i.b)("inlineCode",{parentName:"em"},"LOAD_CASE_NODE")," List")," specifying the list of load case node. The default value is []."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"listLoadNodeContact"))),Object(i.b)("p",null,": A ",Object(i.b)("em",{parentName:"p"},"[LOAD_NODE_CONTACT` List")," specifying the list of load node contact. The default value is [].](LOAD",Object(i.b)("em",{parentName:"p"},"NODE_CONTACT` List")," specifying the list of load node contact. The default value is [].): A ",Object(i.b)("em",{parentName:"p"},"{ref}",Object(i.b)("inlineCode",{parentName:"em"},"LOAD_NODE_CONTACT")," List")," specifying the list of load node contact. The default value is []."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"ilOutputParamList"))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"Integer List")," specifying the list of output parameters. The default value is [].")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"iRefType"))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"An ",Object(i.b)("em",{parentName:"li"},"Integer")," specifying the reference result type. The default value is -1.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"strRefPath"))),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"String"),' specifying the path of reference result. The default value is "".')),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},Object(i.b)("inlineCode",{parentName:"strong"},"listAdvcRefStressResult"))),Object(i.b)("p",null,": A ",Object(i.b)("em",{parentName:"p"},"[ADVC_REF_STRESS_RESULT` List")," specifying the list of data of reference result. The default value is [].](ADVC",Object(i.b)("em",{parentName:"p"},"REF_STRESS_RESULT` List")," specifying the list of data of reference result. The default value is [].): A ",Object(i.b)("em",{parentName:"p"},"{ref}",Object(i.b)("inlineCode",{parentName:"em"},"ADVC_REF_STRESS_RESULT")," List")," specifying the list of data of reference result. The default value is []."),Object(i.b)("h2",{id:"return-code"},"Return Code"),Object(i.b)("p",null,"An ",Object(i.b)("em",{parentName:"p"},"String")," of 1 if successed, or 0 if failed."),Object(i.b)("h2",{id:"sample-code"},"Sample Code"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),'Analysis.ADVC.MakeProcess.EigenValue("Process_0", advcNormalModal=ADVC_NORMAL_MODAL(iNumberModes=3))\n\n')))}p.isMDXComponent=!0},1441:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},O=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),b=p(n),O=a,d=b["".concat(l,".").concat(O)]||b[O]||u[O]||i;return n?r.a.createElement(d,s(s({ref:t},o),{},{components:n})):r.a.createElement(d,s({ref:t},o))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=O;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var o=2;o<i;o++)l[o]=n[o];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}O.displayName="MDXCreateElement"}}]);
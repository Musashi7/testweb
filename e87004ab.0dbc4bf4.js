(window.webpackJsonp=window.webpackJsonp||[]).push([[1211],{1290:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return l})),r.d(t,"toc",(function(){return u})),r.d(t,"default",(function(){return b}));var n=r(3),o=r(7),a=(r(0),r(1441)),i={id:"JPT.ListDoubleToMacroVector",title:"JPT.ListDoubleToMacroVector()",author:"TechnoStar Co., Ltd.",author_url:"https://www.e-technostar.com/",description:"Convert a list of 3 double values to a vector3d (Macro string type)"},l={unversionedId:"psj-utility/JPT.ListDoubleToMacroVector",id:"psj-utility/JPT.ListDoubleToMacroVector",isDocsHomePage:!1,title:"JPT.ListDoubleToMacroVector()",description:"Convert a list of 3 double values to a vector3d (Macro string type)",source:"@site/docs\\psj-utility\\PSJ-Utility_ListDoubleToMacroVector.md",slug:"/psj-utility/JPT.ListDoubleToMacroVector",permalink:"/testweb/docs/psj-utility/JPT.ListDoubleToMacroVector",version:"current",sidebar:"api",previous:{title:"JPT.InverseHideBodies()",permalink:"/testweb/docs/psj-utility/JPT.InverseHideBodies"},next:{title:"JPT.MessageBoxPSJ()",permalink:"/testweb/docs/psj-utility/JPT.MessageBoxPSJ"}},u=[{value:"Description",id:"description",children:[]},{value:"Syntax",id:"syntax",children:[]},{value:"Inputs",id:"inputs",children:[{value:"<code>doubleValue1</code>",id:"doublevalue1",children:[]},{value:"<code>doubleValue2</code>",id:"doublevalue2",children:[]},{value:"<code>doubleValue3</code>",id:"doublevalue3",children:[]}]},{value:"Return Code",id:"return-code",children:[]},{value:"Sample Code",id:"sample-code",children:[]}],c={toc:u};function b(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"description"},"Description"),Object(a.b)("p",null,"Convert a ",Object(a.b)("em",{parentName:"p"},"list")," of 3 ",Object(a.b)("em",{parentName:"p"},"double")," values to a vector3d (Macro string type)."),Object(a.b)("h2",{id:"syntax"},"Syntax"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"JPT.ListDoubleToMacroVector(doubleValue1, doubleValue2, doubleValue3)\n")),Object(a.b)("h2",{id:"inputs"},"Inputs"),Object(a.b)("h3",{id:"doublevalue1"},Object(a.b)("inlineCode",{parentName:"h3"},"doubleValue1")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"A ",Object(a.b)("em",{parentName:"li"},"double")," value standing for the first value which will be used for converting."),Object(a.b)("li",{parentName:"ul"},"This is a required input.")),Object(a.b)("h3",{id:"doublevalue2"},Object(a.b)("inlineCode",{parentName:"h3"},"doubleValue2")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"A ",Object(a.b)("em",{parentName:"li"},"double")," value standing for the second value which will be used for converting."),Object(a.b)("li",{parentName:"ul"},"This is a required input.")),Object(a.b)("h3",{id:"doublevalue3"},Object(a.b)("inlineCode",{parentName:"h3"},"doubleValue3")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"A ",Object(a.b)("em",{parentName:"li"},"double")," value standing for the third value which will be used for converting."),Object(a.b)("li",{parentName:"ul"},"This is a required input.")),Object(a.b)("h2",{id:"return-code"},"Return Code"),Object(a.b)("p",null,"A converted vector3d (Macro string type)."),Object(a.b)("h2",{id:"sample-code"},"Sample Code"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python",metastring:"{0,6}","{0,6}":!0}),"# Convert a list of 3 double values to a vector3d (Macro string type)\ninputValue1 = 0.001\ninputValue2 = 2.1\ninputValue3 = 5.5\n# Return a string object with value = [0.001,2.1,5.5]\nJPT.Debugger(JPT.ListDoubleToMacroVector(inputValue1, inputValue2, inputValue3))\n")))}b.isMDXComponent=!0},1441:function(e,t,r){"use strict";r.d(t,"a",(function(){return d})),r.d(t,"b",(function(){return m}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=o.a.createContext({}),b=function(e){var t=o.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=b(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},s=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),d=b(r),s=n,m=d["".concat(i,".").concat(s)]||d[s]||p[s]||a;return r?o.a.createElement(m,l(l({ref:t},c),{},{components:r})):o.a.createElement(m,l({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=s;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}s.displayName="MDXCreateElement"}}]);
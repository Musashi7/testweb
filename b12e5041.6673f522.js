(window.webpackJsonp=window.webpackJsonp||[]).push([[898],{1441:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return s}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),b=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=b(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=b(n),m=r,s=d["".concat(o,".").concat(m)]||d[m]||u[m]||i;return n?a.a.createElement(s,c(c({ref:t},p),{},{components:n})):a.a.createElement(s,c({ref:t},p))}));function s(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},977:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var r=n(3),a=n(7),i=(n(0),n(1441)),o={id:"Geometry.Edge.PerpendicularLineToEdge",title:"Geometry.Edge.PerpendicularLineToEdge()",author:"TechnoStar Co., Ltd.",authorURL:"https://www.e-technostar.com/",description:"Create line perpendicular to edge from point."},c={unversionedId:"psj-command/geometry/Geometry.Edge.PerpendicularLineToEdge",id:"psj-command/geometry/Geometry.Edge.PerpendicularLineToEdge",isDocsHomePage:!1,title:"Geometry.Edge.PerpendicularLineToEdge()",description:"Create line perpendicular to edge from point.",source:"@site/docs\\psj-command\\geometry\\Geometry.Edge.PerpendicularLineToEdge.md",slug:"/psj-command/geometry/Geometry.Edge.PerpendicularLineToEdge",permalink:"/testweb/docs/psj-command/geometry/Geometry.Edge.PerpendicularLineToEdge",version:"current",sidebar:"api",previous:{title:"Geometry.Edge.PerpendicularLineOfEdge()",permalink:"/testweb/docs/psj-command/geometry/Geometry.Edge.PerpendicularLineOfEdge"},next:{title:"Geometry.Edge.PlanarLine()",permalink:"/testweb/docs/psj-command/geometry/Geometry.Edge.PlanarLine"}},l=[{value:"Description",id:"description",children:[]},{value:"Syntax",id:"syntax",children:[]},{value:"Inputs",id:"inputs",children:[]},{value:"Return Code",id:"return-code",children:[]},{value:"Sample Code",id:"sample-code",children:[]}],p={toc:l};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"description"},"Description"),Object(i.b)("p",null,"This method creates a perpendicular line on the given faces and through a specified point. The newly created lines can be started from the specified point or extend to the closest edge object."),Object(i.b)("h2",{id:"syntax"},"Syntax"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"Geometry.Edge.PerpendicularLineToEdge(crNode=None, crEdge=None, crlFace=[], bBreakFace=True,\n    bExtend=True, bAuto=False, dLimitAngle=135)\n")),Object(i.b)("p",null,"Macro: {ref}",Object(i.b)("inlineCode",{parentName:"p"},"Macro-Geometry-ImprintPerpendicularLine2")),Object(i.b)("p",null,"Ribbon: {menuselection}",Object(i.b)("inlineCode",{parentName:"p"},"Geometry --\x3e Edge --\x3e Perpendicular Line To Edge")),Object(i.b)("h2",{id:"inputs"},"Inputs"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"crNode")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"Cursor")," specifying the start node of new edge. If ",Object(i.b)("em",{parentName:"li"},"bAuto")," or scale is specified, this argument is ignored."),Object(i.b)("li",{parentName:"ul"},"The default value is ",Object(i.b)("em",{parentName:"li"},"None"),".")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"crEdge")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"Cursor")," specifying the edge that the new edge should be extended up to. If ",Object(i.b)("em",{parentName:"li"},"bAuto")," or scale is specified, this argument is ignored."),Object(i.b)("li",{parentName:"ul"},"The default value is ",Object(i.b)("em",{parentName:"li"},"None"),".")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"crlFace")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"List of Cursor")," specifying the faces to be imprinted."),Object(i.b)("li",{parentName:"ul"},"This is a required input.")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"bBreakFace")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"Boolean")," specifying whether to break the faces after the imprint operation."),Object(i.b)("li",{parentName:"ul"},"The default value is ",Object(i.b)("em",{parentName:"li"},"True"),".")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"bExtend")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"Boolean")," specifying whether to extend the new edge through the given node up to the closest edge object."),Object(i.b)("li",{parentName:"ul"},"The default value is ",Object(i.b)("em",{parentName:"li"},"True"),".")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"bAuto")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"Boolean")," specifying whether to specify the node and edge automatically from the pair of edges where the angle between them is equal or greater than the angle ",Object(i.b)("em",{parentName:"li"},"dLimitAngle")," specified. The node in-between will be selected automatically, an imprinting line will be made from that node to the opposite edge of the given faces."),Object(i.b)("li",{parentName:"ul"},"The default value is ",Object(i.b)("em",{parentName:"li"},"False"),".")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"dLimitAngle")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"A ",Object(i.b)("em",{parentName:"li"},"Double")," specifying the angle in degrees to limit the angle within which Edge entities should be considered. This argument is to be used when the ",Object(i.b)("em",{parentName:"li"},"bAuto")," argument has the value ",Object(i.b)("em",{parentName:"li"},"True"),"."),Object(i.b)("li",{parentName:"ul"},"The default value is 135.0.")),Object(i.b)("h2",{id:"return-code"},"Return Code"),Object(i.b)("p",null,"A ",Object(i.b)("em",{parentName:"p"},"String")," of 1 if success, or 0 if fail."),Object(i.b)("h2",{id:"sample-code"},"Sample Code"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"Geometry.Part.Cylinder()\n\nGeometry.Edge.PerpendicularLineToEdge(crNode=Node(250), crEdge=Edge(1), crlFace=[Face(5)])\n\n")))}b.isMDXComponent=!0}}]);
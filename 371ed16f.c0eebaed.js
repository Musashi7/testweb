(window.webpackJsonp=window.webpackJsonp||[]).push([[285],{1441:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return O}));var n=a(0),i=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=i.a.createContext({}),p=function(e){var t=i.a.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},s=function(e){var t=p(e.components);return i.a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,r=e.parentName,o=b(e,["components","mdxType","originalType","parentName"]),s=p(a),m=n,O=s["".concat(r,".").concat(m)]||s[m]||u[m]||l;return a?i.a.createElement(O,c(c({ref:t},o),{},{components:a})):i.a.createElement(O,c({ref:t},o))}));function O(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,r=new Array(l);r[0]=m;var c={};for(var b in t)hasOwnProperty.call(t,b)&&(c[b]=t[b]);c.originalType=e,c.mdxType="string"==typeof e?e:n,r[1]=c;for(var o=2;o<l;o++)r[o]=a[o];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},361:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return b})),a.d(t,"default",(function(){return p}));var n=a(3),i=a(7),l=(a(0),a(1441)),r={id:"Analysis.ADVC.MakeProcess.Static",title:"Analysis.ADVC.MakeProcess.Static()",author:"TechnoStar Co., Ltd.",authorURL:"https://www.e-technostar.com/",description:"Create ADVC Analysis - Static Process"},c={unversionedId:"psj-command/analysis/Analysis.ADVC.MakeProcess.Static",id:"psj-command/analysis/Analysis.ADVC.MakeProcess.Static",isDocsHomePage:!1,title:"Analysis.ADVC.MakeProcess.Static()",description:"Create ADVC Analysis - Static Process",source:"@site/docs\\psj-command\\analysis\\Analysis.ADVC.MakeProcess.Static.md",slug:"/psj-command/analysis/Analysis.ADVC.MakeProcess.Static",permalink:"/testweb/docs/psj-command/analysis/Analysis.ADVC.MakeProcess.Static",version:"current",sidebar:"api",previous:{title:"Analysis.ADVC.MakeProcess.ResponseSpectrum()",permalink:"/testweb/docs/psj-command/analysis/Analysis.ADVC.MakeProcess.ResponseSpectrum"},next:{title:"Analysis.ADVC.MakeProcess.SteadyState()",permalink:"/testweb/docs/psj-command/analysis/Analysis.ADVC.MakeProcess.SteadyState"}},b=[{value:"Description",id:"description",children:[]},{value:"Syntax",id:"syntax",children:[]},{value:"Inputs",id:"inputs",children:[]},{value:"Return Code",id:"return-code",children:[]},{value:"Sample Code",id:"sample-code",children:[]}],o={toc:b};function p(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"description"},"Description"),Object(l.b)("p",null,"This method uses to create ADVC Static process for analysis work."),Object(l.b)("h2",{id:"syntax"},"Syntax"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'Analysis.ADVC.MakeProcess.Static(strName, iGeomNonlinear=0, advcStructTimeStep=ADVC_STRUCT_TIME_STEP(), bConvergence=False, advcConvergence=ADVC_CONVERGENCE(), bContact=False, advcContactIter=ADVC_CONTACT_ITER(), bAutoIncrement=False, advcAutoIncrement=ADVC_AUTO_INCREMENT(), dStabilizationFactor=0.0, crEdit=None, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], ilOutputParamList=[], iRefType=-1, strRefPath="", listAdvcRefStressResult=[])\n')),Object(l.b)("p",null,"Macro: {ref}",Object(l.b)("inlineCode",{parentName:"p"},"Macro-Analysis-AdvcStaticProcess")),Object(l.b)("p",null,"Ribbon: {menuselection}",Object(l.b)("inlineCode",{parentName:"p"},"Analysis --\x3e ADVC --\x3e Make Process --\x3e Static")),Object(l.b)("h2",{id:"inputs"},"Inputs"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"strName")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"String")," specifying the process name of ADVC - Static process."),Object(l.b)("li",{parentName:"ul"},"This is a required input.")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"iGeomNonlinear")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"An ",Object(l.b)("em",{parentName:"li"},"Integer")," specifying the Geometry nonlinear option"),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("em",{parentName:"li"},"iGeomNonlinear=0"),": None"),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("em",{parentName:"li"},"iGeomNonlinear=1"),": Total Lagrange - Consider the geometric nonlinearity due to total Lagrange method"),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("em",{parentName:"li"},"iGeomNonlinear=2"),": Updated Lagrange - Consider the geometric nonlinearity due to updated Lagrange method"),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("em",{parentName:"li"},"iGeomNonlinear=3"),": Linear"),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("em",{parentName:"li"},"iGeomNonlinear=4"),": NonLinear"),Object(l.b)("li",{parentName:"ul"},"The default value is 0.")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"advcStructTimeStep")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"em"},{href:"ADVC_STRUCT_TIME_STEP"}),"ADVC_STRUCT_TIME_STEP"))," specifying the time and increments in the process completion conditions etc...")),Object(l.b)("p",null,": The default value is {ref}",Object(l.b)("inlineCode",{parentName:"p"},"ADVC_STRUCT_TIME_STEP()"),"._",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"ADVC_STRUCT_TIME_STEP()%60."}),"ADVC_STRUCT_TIME_STEP()`."),": The default value is {ref}",Object(l.b)("inlineCode",{parentName:"p"},"ADVC_STRUCT_TIME_STEP()"),"."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"bConvergence")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"Boolean")," specifying to be enable/disable the convergence parameters setting option."),Object(l.b)("li",{parentName:"ul"},"The default value is False.")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"advcConvergence")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"em"},{href:"ADVC_CONVERGENCE"}),"ADVC_CONVERGENCE"))," specifying the convergence parameters setting.")),Object(l.b)("p",null,": The default value is {ref}",Object(l.b)("inlineCode",{parentName:"p"},"ADVC_CONVERGENCE()"),"._",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"ADVC_CONVERGENCE()%60."}),"ADVC_CONVERGENCE()`."),": The default value is {ref}",Object(l.b)("inlineCode",{parentName:"p"},"ADVC_CONVERGENCE()"),"."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"bContact")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"Boolean")," specifying to be enable/disable the contact iterator parameters setting option."),Object(l.b)("li",{parentName:"ul"},"The default value is False.")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"advcContactIter")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"em"},{href:"ADVC_CONTACT_ITER"}),"ADVC_CONTACT_ITER"))," specifying the contact iterator parameters setting.")),Object(l.b)("p",null,": The default value is {ref}",Object(l.b)("inlineCode",{parentName:"p"},"ADVC_CONTACT_ITER()"),"._",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"ADVC_CONTACT_ITER()%60."}),"ADVC_CONTACT_ITER()`."),": The default value is {ref}",Object(l.b)("inlineCode",{parentName:"p"},"ADVC_CONTACT_ITER()"),"."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"bAutoIncrement")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"Boolean")," specifying to be enable/disable the Auto increment parameters setting option."),Object(l.b)("li",{parentName:"ul"},"The default value is False.")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"advcAutoIncrement")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},Object(l.b)("a",Object(n.a)({parentName:"em"},{href:"ADVC_AUTO_INCREMENT"}),"ADVC_AUTO_INCREMENT"))," specifying the Auto increment parameters setting.")),Object(l.b)("p",null,": The default value is {ref}",Object(l.b)("inlineCode",{parentName:"p"},"ADVC_AUTO_INCREMENT()"),"._",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"ADVC_AUTO_INCREMENT()%60."}),"ADVC_AUTO_INCREMENT()`."),": The default value is {ref}",Object(l.b)("inlineCode",{parentName:"p"},"ADVC_AUTO_INCREMENT()"),"."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"dStabilizationFactor")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"Double")," specifying the stabilization factor."),Object(l.b)("li",{parentName:"ul"},"The default value is 0.0.")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"crEdit")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"Cursor")," specifying the ADVC Static process in Assembly Tree to modify it. This option uses only for editing process purpose."),Object(l.b)("li",{parentName:"ul"},"The default value is None.")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"listLoadNode")),Object(l.b)("p",null,": A ",Object(l.b)("em",{parentName:"p"},"[LOAD_NODE` List")," specifying the list of load node.](LOAD",Object(l.b)("em",{parentName:"p"},"NODE` List")," specifying the list of load node.): A ",Object(l.b)("em",{parentName:"p"},"{ref}",Object(l.b)("inlineCode",{parentName:"em"},"LOAD_NODE")," List")," specifying the list of load node."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The default value is [].")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"listLoadCaseNode")),Object(l.b)("p",null,": A ",Object(l.b)("em",{parentName:"p"},"[LOAD_CASE_NODE` List")," specifying the list of load case node.](LOAD",Object(l.b)("em",{parentName:"p"},"CASE_NODE` List")," specifying the list of load case node.): A ",Object(l.b)("em",{parentName:"p"},"{ref}",Object(l.b)("inlineCode",{parentName:"em"},"LOAD_CASE_NODE")," List")," specifying the list of load case node."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The default value is [].")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"listLoadNodeContact")),Object(l.b)("p",null,": A ",Object(l.b)("em",{parentName:"p"},"[LOAD_NODE_CONTACT` List")," specifying the list of load node contact.](LOAD",Object(l.b)("em",{parentName:"p"},"NODE_CONTACT` List")," specifying the list of load node contact.): A ",Object(l.b)("em",{parentName:"p"},"{ref}",Object(l.b)("inlineCode",{parentName:"em"},"LOAD_NODE_CONTACT")," List")," specifying the list of load node contact."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The default value is [].")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"ilOutputParamList")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"Integer List")," specifying the list of output parameters."),Object(l.b)("li",{parentName:"ul"},"The default value is [].")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"iRefType")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"An ",Object(l.b)("em",{parentName:"li"},"Integer")," specifying the result reference type."),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("em",{parentName:"li"},"iRefType=0"),": Temperature Load"),Object(l.b)("li",{parentName:"ul"},"If ",Object(l.b)("em",{parentName:"li"},"iRefType=1"),": Stress"),Object(l.b)("li",{parentName:"ul"},"The default value is 0.")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"strRefPath")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"A ",Object(l.b)("em",{parentName:"li"},"String")," specifying the path of reference result."),Object(l.b)("li",{parentName:"ul"},'The default value is "".')),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"listAdvcRefStressResult")),Object(l.b)("p",null,": A ",Object(l.b)("em",{parentName:"p"},"[ADVC_REF_STRESS_RESULT` List")," specifying the list of data of reference result.](ADVC",Object(l.b)("em",{parentName:"p"},"REF_STRESS_RESULT` List")," specifying the list of data of reference result.): A ",Object(l.b)("em",{parentName:"p"},"{ref}",Object(l.b)("inlineCode",{parentName:"em"},"ADVC_REF_STRESS_RESULT")," List")," specifying the list of data of reference result."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"The default value is [].")),Object(l.b)("h2",{id:"return-code"},"Return Code"),Object(l.b)("p",null,"An ",Object(l.b)("em",{parentName:"p"},"String")," of 1 if success, or 0 if failed."),Object(l.b)("h2",{id:"sample-code"},"Sample Code"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'Geometry.Part.Cube(strPartName="Cube_2")\n\nAnalysis.ADVC.MakeProcess.Static(strName="ADVC_DEFAULT_PROCESS", advcStructTimeStep=ADVC_STRUCT_TIME_STEP(dMaxDt=1.0, dMinDt=1e-05), dStabilizationFactor=DFLT_DBL, listLoadNode=[], listLoadCaseNode=[], listLoadNodeContact=[], listAdvcRefStressResult=[])\n\n\n')))}p.isMDXComponent=!0}}]);
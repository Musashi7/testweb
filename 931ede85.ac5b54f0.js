(window.webpackJsonp=window.webpackJsonp||[]).push([[723],{1441:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=r.a.createContext({}),p=function(e){var t=r.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=p(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,l=e.parentName,b=i(e,["components","mdxType","originalType","parentName"]),s=p(a),u=n,d=s["".concat(l,".").concat(u)]||s[u]||m[u]||c;return a?r.a.createElement(d,o(o({ref:t},b),{},{components:a})):r.a.createElement(d,o({ref:t},b))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,l=new Array(c);l[0]=u;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var b=2;b<c;b++)l[b]=a[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},802:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return i})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(7),c=(a(0),a(1441)),l={id:"Geometry.Face.Edges",title:"Geometry.Face.Edges()",author:"TechnoStar Co., Ltd.",authorURL:"https://www.e-technostar.com/",description:"Create a face from bound edges or nodes"},o={unversionedId:"psj-command/geometry/Geometry.Face.Edges",id:"psj-command/geometry/Geometry.Face.Edges",isDocsHomePage:!1,title:"Geometry.Face.Edges()",description:"Create a face from bound edges or nodes",source:"@site/docs\\psj-command\\geometry\\Geometry.Face.Edges.md",slug:"/psj-command/geometry/Geometry.Face.Edges",permalink:"/testweb/docs/psj-command/geometry/Geometry.Face.Edges",version:"current",sidebar:"api",previous:{title:"Geometry.Face.CreateSmoothFace()",permalink:"/testweb/docs/psj-command/geometry/Geometry.Face.CreateSmoothFace"},next:{title:"Geometry.Face.Elements()",permalink:"/testweb/docs/psj-command/geometry/Geometry.Face.Elements"}},i=[{value:"Description",id:"description",children:[]},{value:"Syntax",id:"syntax",children:[]},{value:"Inputs",id:"inputs",children:[]},{value:"Return Code",id:"return-code",children:[]},{value:"Sample Code",id:"sample-code",children:[]}],b={toc:i};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"description"},"Description"),Object(c.b)("p",null,"This method generates a face using the given edges as the face's boundaries. It generates a face by creating the geometry consisting of the underlying surface, associated edges, and vertices."),Object(c.b)("h2",{id:"syntax"},"Syntax"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"Geometry.Face.Edges(crlEdge=[], crlPart=[], crlNode=[], bSharedFace=False, bSmoothFace=False,\n    bCreatePart=False, bImproved=False, bBarsOnly=False, bOnlyOnePart=True, bUseMidNodes=False)\n")),Object(c.b)("p",null,"Macro: {ref}",Object(c.b)("inlineCode",{parentName:"p"},"Macro-Geometry-CreateFaceFromEdges")),Object(c.b)("p",null,"Ribbon: {menuselection}",Object(c.b)("inlineCode",{parentName:"p"},"Geometry --\x3e Face --\x3e Edges")),Object(c.b)("h2",{id:"inputs"},"Inputs"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"crlEdge")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"List of Cursor")," specifying the edges that bound the new face. Either ",Object(c.b)("em",{parentName:"li"},"crlEdge")," or ",Object(c.b)("em",{parentName:"li"},"crlNode")," must be specified."),Object(c.b)("li",{parentName:"ul"},"The default value is [].")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"crlPart")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"List of Cursor")," specifying a given part to that the new face will belong."),Object(c.b)("li",{parentName:"ul"},"The default value is [].")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"crlNode")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"List of Cursor")," specifying two nodes to define the direction in which the curved surface be created smoothly. If ",Object(c.b)("em",{parentName:"li"},"crlNode")," is specified, the curved surface will be smoother than the face created by bound edges only."),Object(c.b)("li",{parentName:"ul"},"The default value is [].")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bSharedFace")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Boolean")," specifying whether to create a shared face when the given edges are shared edges."),Object(c.b)("li",{parentName:"ul"},"The default value is ",Object(c.b)("em",{parentName:"li"},"False"),".")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bSmoothFace")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Boolean")," specifying whether to create a smooth face instead of planar face."),Object(c.b)("li",{parentName:"ul"},"The default value is ",Object(c.b)("em",{parentName:"li"},"False"),".")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bCreatePart")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Boolean")," specifying whether to stitch the newly created face to the new part. If ",Object(c.b)("em",{parentName:"li"},"bSharedFace=True"),", this argument will be ignored."),Object(c.b)("li",{parentName:"ul"},"The default value is ",Object(c.b)("em",{parentName:"li"},"False"),".")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bImproved")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Boolean")," specifying whether the newly created face is created with smooth direction. This argument does not affect the operation. If ",Object(c.b)("em",{parentName:"li"},"crlNode")," is not specified, this argument is ignored."),Object(c.b)("li",{parentName:"ul"},"The default value is ",Object(c.b)("em",{parentName:"li"},"False"),".")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bBarsOnly")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Boolean")," indicating whether all of the selected edges are Bar part only. This argument does not affect the operation."),Object(c.b)("li",{parentName:"ul"},"The default value is ",Object(c.b)("em",{parentName:"li"},"False"),".")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bOnlyOnePart")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Boolean")," indicating whether the newly created face is in the same new part. This argument does not affect the operation."),Object(c.b)("li",{parentName:"ul"},"The default value is ",Object(c.b)("em",{parentName:"li"},"True"),".")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bUseMidNodes")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Boolean")," specifying whether to include middle nodes when creating face."),Object(c.b)("li",{parentName:"ul"},"The default value is ",Object(c.b)("em",{parentName:"li"},"False"),".")),Object(c.b)("h2",{id:"return-code"},"Return Code"),Object(c.b)("p",null,"A ",Object(c.b)("em",{parentName:"p"},"String")," of 1 if success, or 0 if fail."),Object(c.b)("h2",{id:"sample-code"},"Sample Code"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"Geometry.Part.Cube()\n\nGeometry.Face.Edges(crlEdge=[Edge(9, 19)])\n\n")))}p.isMDXComponent=!0}}]);
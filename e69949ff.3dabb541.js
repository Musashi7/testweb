(window.webpackJsonp=window.webpackJsonp||[]).push([[1201],{1280:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var r=n(3),a=n(7),c=(n(0),n(1441)),o={id:"Meshing.CADProjection.Face",title:"Meshing.CADProjection.Face()",author:"TechnoStar Co., Ltd.",authorURL:"https://www.e-technostar.com/",description:"Project nodes of meshed faces to CAD parts"},i={unversionedId:"psj-command/meshing/Meshing.CADProjection.Face",id:"psj-command/meshing/Meshing.CADProjection.Face",isDocsHomePage:!1,title:"Meshing.CADProjection.Face()",description:"Project nodes of meshed faces to CAD parts",source:"@site/docs\\psj-command\\meshing\\Meshing.CADProjection.Face.md",slug:"/psj-command/meshing/Meshing.CADProjection.Face",permalink:"/testweb/docs/psj-command/meshing/Meshing.CADProjection.Face",version:"current",sidebar:"api",previous:{title:"Meshing.BarMeshing()",permalink:"/testweb/docs/psj-command/meshing/Meshing.BarMeshing"},next:{title:"Meshing.CADProjection.FaceToFace()",permalink:"/testweb/docs/psj-command/meshing/Meshing.CADProjection.FaceToFace"}},l=[{value:"Description",id:"description",children:[]},{value:"Syntax",id:"syntax",children:[]},{value:"Inputs",id:"inputs",children:[]},{value:"Return Code",id:"return-code",children:[]},{value:"Sample Code",id:"sample-code",children:[]}],s={toc:l};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"description"},"Description"),Object(c.b)("p",null,"This method projects mid nodes and/or corner nodes of the meshed faces to the CAD parts selected."),Object(c.b)("h2",{id:"syntax"},"Syntax"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"Meshing.CADProjection.Face(crCadPart, crlMeshedFace, bForceProject=False,\n    bProjectCornerNodes=True, bProjectMidNodes=False, bIDcheck=False)\n")),Object(c.b)("p",null,"Macro: {ref}",Object(c.b)("inlineCode",{parentName:"p"},"Macro-Meshing-CadProject_Face")),Object(c.b)("p",null,"Ribbon: {menuselection}",Object(c.b)("inlineCode",{parentName:"p"},"Meshing --\x3e CAD Projection --\x3e Face")),Object(c.b)("h2",{id:"inputs"},"Inputs"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"crCadPart")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Cursor")," specifying the CAD parts. Faces on selected parts will be the referenced faces for projection."),Object(c.b)("li",{parentName:"ul"},"This is a required input.")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"crlMeshedFace")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Cursor List")," specifying list of meshed faces. Nodes on these faces will be projected onto referenced faces."),Object(c.b)("li",{parentName:"ul"},"This is a required input.")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bForceProject")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Boolean")," specifying whether to force projection or not. If ",Object(c.b)("em",{parentName:"li"},"True"),", Jupiter will try to do projection more aggressively, hence may takes more time to finish."),Object(c.b)("li",{parentName:"ul"},"The default value is ",Object(c.b)("em",{parentName:"li"},"False"),".")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bProjectCornerNodes")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Boolean")," specifying whether to project corner nodes or not. If ",Object(c.b)("em",{parentName:"li"},"True"),", corner nodes of elements will be projected."),Object(c.b)("li",{parentName:"ul"},"The default value is ",Object(c.b)("em",{parentName:"li"},"True"),".")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bProjectMidNodes")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Boolean")," specifying whether to project mid nodes or not. If ",Object(c.b)("em",{parentName:"li"},"True"),", mid nodes of elements will be projected."),Object(c.b)("li",{parentName:"ul"},"The default value is ",Object(c.b)("em",{parentName:"li"},"False"),".")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"bIDcheck")),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"A ",Object(c.b)("em",{parentName:"li"},"Boolean")," specifying whether to check ID when projecting or not."),Object(c.b)("li",{parentName:"ul"},"If ",Object(c.b)("em",{parentName:"li"},"True"),", nodes (on selected meshed faces) will only be projected to CAD faces (in the selected CAD Parts) whose ID is the same as the meshed face of those nodes. For example, if one node is on face 5, that node will only be projected to CAD face (in selected CAD Parts) with the same ID (i.e. 5)."),Object(c.b)("li",{parentName:"ul"},"If ",Object(c.b)("em",{parentName:"li"},"False"),", ID check will be skipped, and projection takes place when nodes and CAD faces (in the selected CAD parts) are at the closest distance."),Object(c.b)("li",{parentName:"ul"},"The default value is ",Object(c.b)("em",{parentName:"li"},"False"),".")),Object(c.b)("h2",{id:"return-code"},"Return Code"),Object(c.b)("p",null,"A ",Object(c.b)("em",{parentName:"p"},"String")," of 1 if success, or 0 if fail."),Object(c.b)("h2",{id:"sample-code"},"Sample Code"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),'Geometry.Part.Cylinder()\nGeometry.Part.Cylinder(dlOrigin=[0.0, 0.0, 0.02], strName="Cylinder_2", iPartCol=6409934)\n\nGeometry.FCircleAdjustVertex(crlPart=[Part(1, 2)])\nMeshing.SetMeshAttribute(crlPart=[Part(1, 2)],\n    surfaceMesh=SURFACE_MESH(dMaxElemSize=0.015, dMinElemSize=0.0005,\n    dGeomAngle=0.7853981634, dMinStretchVal=0.0, iPerformanceMode=1,\n    dAutoMergeTinyFacesAngle=0.5235987756, bGeomApprox=True, iNextEntityOffsetId=0))\n\nMeshing.SurfaceMeshing(crlPart=[Part(1, 2)], surfaceMesh=SURFACE_MESH(dMaxElemSize=0.015,\n    dMinElemSize=0.0005, dGeomAngle=0.7853981634, dMinStretchVal=0.0, iPerformanceMode=1,\n    dAutoMergeTinyFacesAngle=0.5235987756, bGeomApprox=True, iNextEntityOffsetId=0),\n    iThreadNum=4)\n\nMeshing.SolidMeshing(crlPart=[Part(1, 2)], bTet10=True, dGradingFactor=1.05,\n    dStretchLimit=0.1, iSpeedVsQual=1, iRegion=1, bSafeMode=False, iParallel=4,\n    bInternalMeshOnly=False, iPartColor=65280)\n\nMeshing.CADProjection.Face(crCadPart=RefPart(2), crlMeshedFace=[Face(10)],\n    bProjectMidNodes=True, bIDcheck=True)\n\n')))}b.isMDXComponent=!0},1441:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),b=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=b(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=b(n),u=r,m=p["".concat(o,".").concat(u)]||p[u]||d[u]||c;return n?a.a.createElement(m,i(i({ref:t},s),{},{components:n})):a.a.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<c;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);
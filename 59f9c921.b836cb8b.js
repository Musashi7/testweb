(window.webpackJsonp=window.webpackJsonp||[]).push([[457],{1441:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return d}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(r),m=n,d=u["".concat(c,".").concat(m)]||u[m]||b[m]||o;return r?a.a.createElement(d,i(i({ref:t},s),{},{components:r})):a.a.createElement(d,i({ref:t},s))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,c=new Array(o);c[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var s=2;s<o;s++)c[s]=r[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},533:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return i})),r.d(t,"toc",(function(){return l})),r.d(t,"default",(function(){return p}));var n=r(3),a=r(7),o=(r(0),r(1441)),c={id:"Geometry.MergeEntities.Faces",title:"Geometry.MergeEntities.Faces()",author:"TechnoStar Co., Ltd.",authorURL:"https://www.e-technostar.com/",description:"Merge face entity"},i={unversionedId:"psj-command/geometry/Geometry.MergeEntities.Faces",id:"psj-command/geometry/Geometry.MergeEntities.Faces",isDocsHomePage:!1,title:"Geometry.MergeEntities.Faces()",description:"Merge face entity",source:"@site/docs\\psj-command\\geometry\\Geometry.MergeEntities.Faces.md",slug:"/psj-command/geometry/Geometry.MergeEntities.Faces",permalink:"/testweb/docs/psj-command/geometry/Geometry.MergeEntities.Faces",version:"current",sidebar:"api",previous:{title:"Geometry.MergeEntities.Edges()",permalink:"/testweb/docs/psj-command/geometry/Geometry.MergeEntities.Edges"},next:{title:"Geometry.MergeEntities.PartFaces()",permalink:"/testweb/docs/psj-command/geometry/Geometry.MergeEntities.PartFaces"}},l=[{value:"Description",id:"description",children:[]},{value:"Syntax",id:"syntax",children:[]},{value:"Inputs",id:"inputs",children:[]},{value:"Return Code",id:"return-code",children:[]},{value:"Sample Code",id:"sample-code",children:[]}],s={toc:l};function p(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"description"},"Description"),Object(o.b)("p",null,"This method merges face entities."),Object(o.b)("h2",{id:"syntax"},"Syntax"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"Geometry.MergeEntities.Faces(crlFace=[], bMergeEdge=True, bRemoveNonBoundEdge=True)\n")),Object(o.b)("p",null,"Macro: {ref}",Object(o.b)("inlineCode",{parentName:"p"},"Macro-Geometry-MergeFace_MergeEntities")),Object(o.b)("p",null,"Ribbon: {menuselection}",Object(o.b)("inlineCode",{parentName:"p"},"Geometry --\x3e Merge Entities --\x3e Faces")),Object(o.b)("h2",{id:"inputs"},"Inputs"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"crlFace")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"A ",Object(o.b)("em",{parentName:"li"},"Cursor List")," specifying the faces to be merged."),Object(o.b)("li",{parentName:"ul"},"The default value is [].")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"bMergeEdge")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"A ",Object(o.b)("em",{parentName:"li"},"Boolean")," whether to merge edges belong to the given faces."),Object(o.b)("li",{parentName:"ul"},"The default value is ",Object(o.b)("em",{parentName:"li"},"True"),".")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"bRemoveNonBoundEdge")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"A ",Object(o.b)("em",{parentName:"li"},"Boolean")," whether to remove edges that are not a boundary edges."),Object(o.b)("li",{parentName:"ul"},"The default value is ",Object(o.b)("em",{parentName:"li"},"True"),".")),Object(o.b)("h2",{id:"return-code"},"Return Code"),Object(o.b)("p",null,"A ",Object(o.b)("em",{parentName:"p"},"String")," of 1 if success, or 0 if fail."),Object(o.b)("h2",{id:"sample-code"},"Sample Code"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"Geometry.Part.Cube()\n\nGeometry.Edge.Line(poslPositions=[[0.005, 0, 0.01], [0.006, 0.01, 0.01]], crlTargetFace=[Face(26)])\n\nGeometry.Edge.Line(poslPositions=[[0.002, 0.002, 0.01], [0.003, 0.005, 0.01]], crlTargetFace=[Face(26)])\n\nGeometry.MergeEntities.Faces(crlFace=[Face(26, 28)])\n\n")))}p.isMDXComponent=!0}}]);